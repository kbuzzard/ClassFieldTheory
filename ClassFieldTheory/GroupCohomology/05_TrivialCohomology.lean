import Mathlib
import ClassFieldTheory.GroupCohomology.¬´01_Basic¬ª
import ClassFieldTheory.GroupCohomology.¬´02_restriction¬ª
import ClassFieldTheory.GroupCohomology.¬´04_TateCohomology_def¬ª

/-!
# Trivial (Tate) (co)homology

An object `M : Rep R G` is has *trivial cohomology* if
`H‚Åø(S, M)=0` for all `n > 0` and all subgroup `S` of `G`.

`M` has *trivial homology* if for all subgroups `S` and all `n > 0`
we have `H‚Çô(S, M) ‚âÖ 0`.

`M` has *trivial Tate cohomology* if for all subgroups `S` and all `n : ‚Ñ§`
we have `H‚Åø_{Tate}(S, M) ‚âÖ 0`.

We define these three classes of representation, and prove that they are preserved
by isomorphisms.
-/

open
  CategoryTheory
  CategoryTheory.Limits
  groupCohomology

namespace Rep
variable {R G : Type} [CommRing R] [Group G]

/--
A representation `M : Rep R G` has trivial cohomology if the cohomology groups `H‚Åø(H, M)`
are zero for every subgroup `H` of `G` and every `n > 0`.
-/
class TrivialCohomology (M : Rep R G) : Prop where
  isZero (H : Subgroup G) {n : ‚Ñï} :
    IsZero (groupCohomology (M ‚Üì H.subtype) (n + 1))

lemma _root_.groupCohomology.map_congr.{u} {k G H : Type u} [CommRing k] [Group G] [Group H]
    {A : Rep k H} {B : Rep k G} (f1 f2 : G ‚Üí* H) (œÜ1 : (Action.res (ModuleCat k) f1).obj A ‚ü∂ B)
    (œÜ2 : (Action.res (ModuleCat k) f2).obj A ‚ü∂ B) (h1 : f1 = f2) (h2 : œÜ1.hom = œÜ2.hom) (n : ‚Ñï) :
    groupCohomology.map f1 œÜ1 n = groupCohomology.map f2 œÜ2 n := by
  subst h1
  congr
  ext
  simp [h2]

noncomputable def groupCohomology.mapIso {H : Type} [Fintype H] [Group H] [Fintype G]
    {M : Rep R G} (e : G ‚âÉ* H) {N : Rep R H}
    (e' : M.V ‚âÖ N.V)
    (he' : ‚àÄ (g : G), M.2 g ‚â´ e'.hom = e'.hom ‚â´ N.2 (e g)) (n : ‚Ñï) :
    groupCohomology M n ‚âÖ groupCohomology N n where
  hom := groupCohomology.map e.symm ‚ü®e'.hom, by aesop‚ü© n
  inv := groupCohomology.map e ‚ü®e'.inv, by aesop (add simp [Iso.comp_inv_eq])‚ü© n
  hom_inv_id := by
    rw [‚Üê groupCohomology.map_comp, ‚Üê groupCohomology.map_id]
    exact groupCohomology.map_congr _ _ _ _ (by simp) (by simp) n
  inv_hom_id := by
    rw [‚Üê groupCohomology.map_comp, ‚Üê groupCohomology.map_id]
    exact groupCohomology.map_congr _ _ _ _ (by simp) (by simp) n

noncomputable def res_iso_range_res (M : Rep R G) {H : Type} [Group H] (f : H ‚Üí* G)
    (n : ‚Ñï) (hf : Function.Injective f) :
    groupCohomology (M ‚Üì f.range.subtype) n ‚âÖ
      groupCohomology (M ‚Üì f) n where
  hom := groupCohomology.map f.rangeRestrict (ùüô (M ‚Üì f)) _
  inv := groupCohomology.map (MonoidHom.ofInjective hf).symm.toMonoidHom ‚ü®ùüô M.V, by simp‚ü© _
  hom_inv_id := by
    rw [‚Üê groupCohomology.map_comp, ‚Üê groupCohomology.map_id]
    exact groupCohomology.map_congr _ _ _ _ (by ext; simp) (by simp) n
  inv_hom_id := by
    rw [‚Üê groupCohomology.map_comp, ‚Üê groupCohomology.map_id]
    refine groupCohomology.map_congr _ _ _ _ (MonoidHom.ext_iff.2 fun x ‚Ü¶ ?_) (by simp) n
    rw [MonoidHom.comp_apply]
    exact (MonoidHom.ofInjective hf).symm_apply_apply _

theorem istrivial_of_injective (M : Rep R G) {H : Type} [Group H] (f : H ‚Üí* G) (n : ‚Ñï) (hn : n ‚â† 0)
    (hf : Function.Injective f) [M.TrivialCohomology] : IsZero (groupCohomology (M ‚Üì f) n) := by
  cases n with
  | zero => tauto
  | succ n => exact IsZero.of_iso (@TrivialCohomology.isZero R G _ _ M _ f.range n) <|
    (res_iso_range_res M f (n + 1) hf).symm

lemma TrivialCohomology.of_iso {M N : Rep R G} (f : M ‚âÖ N) [N.TrivialCohomology] :
    M.TrivialCohomology := by
  constructor
  intro H n
  have : (functor R H n.succ).obj (M ‚Üì _) ‚âÖ (functor R H n.succ).obj (N ‚Üì _)
  ¬∑ apply (functor _ _ n.succ).mapIso
    exact (res H.subtype).mapIso f
  exact isZero H |>.of_iso this

protected lemma TrivialCohomology.res (M : Rep R G) {H : Subgroup G} [M.TrivialCohomology] :
    (M ‚Üì H.subtype).TrivialCohomology where
  isZero S n := istrivial_of_injective M (H.subtype.comp S.subtype) (n + 1) (by omega)
      (show Function.Injective (H.subtype ‚àò _) from
        Function.Injective.comp H.subtype_injective S.subtype_injective)

lemma isZero_of_trivialCohomology {M : Rep R G} [M.TrivialCohomology] {n : ‚Ñï} :
    IsZero (groupCohomology M (n + 1)) :=
  istrivial_of_injective M (.id G) n.succ (by omega) Function.injective_id

lemma trivialCohomology_iff_res {M : Rep R G} :
    M.TrivialCohomology ‚Üî
      ‚àÄ {H : Type} [Group H] (f : H ‚Üí* G), Function.Injective f ‚Üí (M ‚Üì f).TrivialCohomology where
  mp _ _ _ f inj := ‚ü®fun S n ‚Ü¶  istrivial_of_injective M (f.comp S.subtype) (n + 1) (by omega)
    (show Function.Injective (f ‚àò _) from Function.Injective.comp inj S.subtype_injective)‚ü©
  mpr h := h (f := .id G) Function.injective_id

class TrivialHomology (M : Rep R G) : Prop where
  isZero (H : Subgroup G) {n : ‚Ñï} :
    IsZero (groupHomology (M ‚Üì H.subtype) (n + 1))

lemma _root_.groupHomology.map_congr.{u} {k G H : Type u} [CommRing k] [Group G] [Group H]
    {A : Rep k G} {B : Rep k H} (f1 f2 : G ‚Üí* H) (œÜ1 : A ‚ü∂ (Action.res (ModuleCat k) f1).obj B)
    (œÜ2 : A ‚ü∂ (Action.res (ModuleCat k) f2).obj B) (h1 : f1 = f2) (h2 : œÜ1.hom = œÜ2.hom) (n : ‚Ñï) :
    groupHomology.map f1 œÜ1 n = groupHomology.map f2 œÜ2 n := by
  subst h1
  congr
  ext
  simp [h2]

lemma TrivialHomology.of_iso {M N : Rep R G} (f : M ‚âÖ N) [N.TrivialHomology] :
    M.TrivialHomology := by
  constructor
  intro H n
  exact (isZero _).of_iso <| (groupHomology.functor R H n.succ).mapIso <| (res H.subtype).mapIso f

noncomputable def res_iso_range_res_homology (M : Rep R G) {H : Type} [Group H] (f : H ‚Üí* G)
    (n : ‚Ñï) (hf : Function.Injective f) :
    groupHomology (M ‚Üì f.range.subtype) n ‚âÖ groupHomology (M ‚Üì f) n where
  hom := groupHomology.map (MonoidHom.ofInjective hf).symm.toMonoidHom ‚ü®ùüô M.V, by simp‚ü© _
  inv := groupHomology.map f.rangeRestrict ‚ü®ùüô M.V, by simp‚ü© _
  hom_inv_id := by
    rw [‚Üê groupHomology.map_comp]
    erw [CategoryTheory.Functor.map_id, Category.comp_id]
    rw [‚Üê groupHomology.map_id]
    exact groupHomology.map_congr _ _ _ _ (by ext; simp) (by simp) n
  inv_hom_id := by
    rw [‚Üê groupHomology.map_comp, ‚Üê groupHomology.map_id]
    exact groupHomology.map_congr _ _ _ _ (MonoidHom.ext_iff.2 <| fun x ‚Ü¶ by
      rw [MonoidHom.comp_apply]
      exact (MonoidHom.ofInjective hf).symm_apply_apply _) (by simp) n

lemma TrivialHomology.of_injective {M : Rep R G} {H : Type} [Group H] (f : H ‚Üí* G) (n : ‚Ñï)
    (hn : n ‚â† 0) (hf : Function.Injective f) [M.TrivialHomology] :
    IsZero (groupHomology (M ‚Üì f) n) := by
  cases n with
  | zero => tauto
  | succ n => exact IsZero.of_iso (@TrivialHomology.isZero R G _ _ M _ f.range n) <|
    (res_iso_range_res_homology M f (n + 1) hf).symm

protected lemma TrivialHomology.res (M : Rep R G) {H : Type} [Group H] {f : H ‚Üí* G}
    (hf : Function.Injective f) [M.TrivialHomology] : (M ‚Üì f).TrivialHomology where
  isZero H n :=
    TrivialHomology.of_injective (f.comp H.subtype) (n + 1) (by omega) <|
      show Function.Injective (f ‚àò _) from Function.Injective.comp hf H.subtype_injective

lemma isZero_of_trivialHomology {M : Rep R G} [M.TrivialHomology] {n : ‚Ñï} :
    IsZero (groupHomology M (n + 1)) :=
  TrivialHomology.of_injective (.id G) n.succ (by omega) Function.injective_id

lemma trivialHomology_iff_res {M : Rep R G} :
    M.TrivialHomology ‚Üî
      ‚àÄ {H : Type} [Group H] (f : H ‚Üí* G), Function.Injective f ‚Üí (M ‚Üì f).TrivialHomology
    where
  mp _ _ _ _ inj := .res M inj
  mpr h := h (f := .id G) Function.injective_id

class TrivialTateCohomology [Finite G] (M : Rep R G) : Prop where
  isZero (H : Subgroup G) {n : ‚Ñ§} :
    IsZero ((tateCohomology n).obj (M ‚Üì H.subtype : Rep R H))

lemma TrivialTateCohomology.of_iso [Finite G] {M N : Rep R G} (f : M ‚âÖ N)
    [N.TrivialTateCohomology] :
    M.TrivialTateCohomology := ‚ü®fun H ‚Ü¶ (TrivialTateCohomology.isZero _).of_iso <|
    (tateCohomology _).mapIso <| (res H.subtype).mapIso f‚ü©

--TODO : add simp lemma for Rep.norm.hom
noncomputable abbrev _root_.TateCohomology.cochainsmap {G H : Type} [Group G] [Group H] [Fintype G]
    [Fintype H] {M : Rep R G} {N : Rep R H} (e : G ‚âÉ* H)
    (œÜ : M ‚ü∂ N ‚Üì e) :=
  CochainComplex.ConnectData.map (tateComplexConnectData M) (tateComplexConnectData N)
  (groupHomology.chainsMap e œÜ)
  (groupCohomology.cochainsMap e.symm ‚ü®œÜ.hom, fun h ‚Ü¶ by simpa using œÜ.comm (e.symm h)‚ü©) <| by
  ext f0 (m : M) h0
  simp [cochainsMap_f, Rep.norm, Representation.norm]
  have (h : H) := ModuleCat.hom_ext_iff.1 (œÜ.comm (e.symm h))
  simp only [Action.res_obj_V, ModuleCat.hom_comp, œÅ_hom, Action.res_obj_œÅ, MonoidHom.coe_comp,
    MonoidHom.coe_coe, Function.comp_apply, MulEquiv.apply_symm_apply] at this
  conv_lhs =>
    enter [2]
    intro h
    rw[‚Üê LinearMap.comp_apply, ‚Üê this]
  simp only [LinearMap.coe_comp, Function.comp_apply]
  exact Finset.sum_equiv e.symm.toEquiv (fun _ ‚Ü¶ by simp) <| fun i _ ‚Ü¶ rfl

noncomputable abbrev _root_.TateCohomology.map {G H : Type} [Group G] [Group H] [Fintype G] [Fintype H]
    {M : Rep R G} {N : Rep R H} (e : G ‚âÉ* H) (œÜ : M ‚ü∂ (Action.res (ModuleCat R) e).obj N)
    (n : ‚Ñ§) :
    (tateCohomology n).obj M ‚ü∂ (tateCohomology n).obj N :=
  HomologicalComplex.homologyMap (TateCohomology.cochainsmap e œÜ) _

lemma _root_.groupHomology.chainsMap_congr {k G H : Type} [CommRing k] [Group G] [Group H]
    {A : Rep k G} {B : Rep k H} (f1 f2 : G ‚Üí* H) (œÜ1 : A ‚ü∂ (Action.res (ModuleCat k) f1).obj B)
    (œÜ2 : A ‚ü∂ (Action.res (ModuleCat k) f2).obj B) (h1 : f1 = f2) (h2 : œÜ1.hom = œÜ2.hom) :
    groupHomology.chainsMap f1 œÜ1 = groupHomology.chainsMap f2 œÜ2 := by
  subst h1
  congr
  ext
  simp [h2]

lemma _root_.groupCohomology.cochainsMap_congr {k G H : Type} [CommRing k] [Group G] [Group H]
    {A : Rep k G} {B : Rep k H} (f1 f2 : G ‚Üí* H) (œÜ1 : (Action.res (ModuleCat k) f1).obj B ‚ü∂ A)
    (œÜ2 : (Action.res (ModuleCat k) f2).obj B ‚ü∂ A) (h1 : f1 = f2) (h2 : œÜ1.hom = œÜ2.hom) :
    groupCohomology.cochainsMap f1 œÜ1 = groupCohomology.cochainsMap f2 œÜ2 := by
  subst h1
  congr
  ext
  simp [h2]

noncomputable def TateCohomology.res_iso {H : Type} [Fintype H] [Group H] [Fintype G]
    {M : Rep R G} (e : G ‚âÉ* H) {N : Rep R H}
    (e' : M.V ‚âÖ N.V)
    (he' : ‚àÄ (g : G), M.2 g ‚â´ e'.hom = e'.hom ‚â´ N.2 (e g)) (n : ‚Ñ§) :
    (tateCohomology n).obj M ‚âÖ
    ((tateCohomology n).obj N) where
  hom := TateCohomology.map e ‚ü®e'.hom, by aesop‚ü© n
  inv := TateCohomology.map e.symm ‚ü®e'.inv, e.surjective.forall.mpr <| by
      dsimp
      simp_rw [Iso.comp_inv_eq, Category.assoc, Iso.eq_inv_comp, he',
        e.apply_symm_apply, implies_true]‚ü© n
  hom_inv_id := by
    rw [‚Üê HomologicalComplex.homologyMap_comp, ‚Üê CochainComplex.ConnectData.map_comp]
    conv_rhs => erw [‚Üê HomologicalComplex.homologyMap_id, ‚Üê CochainComplex.ConnectData.map_id]
    congr
    ¬∑ rw [‚Üê groupHomology.chainsMap_comp, ‚Üê groupHomology.chainsMap_id]
      exact groupHomology.chainsMap_congr _ _ _ _ (by simp) (by simp)
    ¬∑ rw [‚Üê groupCohomology.cochainsMap_comp, ‚Üê groupCohomology.cochainsMap_id]
      exact groupCohomology.cochainsMap_congr _ _ _ _ (by simp) (by simp)
  inv_hom_id := by
    rw [‚Üê HomologicalComplex.homologyMap_comp, ‚Üê CochainComplex.ConnectData.map_comp]
    conv_rhs => erw [‚Üê HomologicalComplex.homologyMap_id, ‚Üê CochainComplex.ConnectData.map_id]
    congr
    ¬∑ rw [‚Üê groupHomology.chainsMap_comp, ‚Üê groupHomology.chainsMap_id]
      exact groupHomology.chainsMap_congr _ _ _ _ (by simp) (by simp)
    ¬∑ rw [‚Üê groupCohomology.cochainsMap_comp, ‚Üê groupCohomology.cochainsMap_id]
      exact groupCohomology.cochainsMap_congr _ _ _ _ (by simp) (by simp)

attribute [local instance] Fintype.ofFinite in
lemma TrivialTateCohomology.of_injective [Fintype G] {M : Rep R G} {H : Type} [Fintype H]
    [Group H] (f : H ‚Üí* G) (n : ‚Ñ§) (hf : Function.Injective f)
    [M.TrivialTateCohomology] : IsZero ((tateCohomology n).obj (M ‚Üì f)) :=
  .of_iso (isZero (M := M) f.range (n := n)) <| TateCohomology.res_iso
    (MonoidHom.ofInjective hf) (Iso.refl _) (by aesop) _

lemma isZero_of_trivialTateCohomology [Fintype G] {M : Rep R G}
    [M.TrivialTateCohomology] {n : ‚Ñï} : IsZero ((tateCohomology n).obj M) :=
  TrivialTateCohomology.of_injective (.id G) n Function.injective_id

instance TrivialTateCohomology.to_trivialCohomology [Fintype G] {M : Rep R G}
    [M.TrivialTateCohomology] : M.TrivialCohomology where
  isZero H n := (TrivialTateCohomology.isZero (M := M) H (n := Nat.cast n + 1)).of_iso <|
    tateCohomology.isoGroupCohomology n|>.app (M ‚Üì H.subtype)|>.symm

instance TrivialtateCohomology.to_trivialHomology [Fintype G] {M : Rep R G}
    [M.TrivialTateCohomology] : M.TrivialHomology where
  isZero H n := (TrivialTateCohomology.isZero H (n := - n - 2)).of_iso <|
    (tateCohomology.isoGroupHomology n|>.app (M ‚Üì H.subtype)).symm

lemma TrivialTateCohomology.of_cases [Fintype G] {M : Rep R G}
    [M.TrivialCohomology] [M.TrivialHomology]
    (h : ‚àÄ {H : Type} [Group H] (œÜ : H ‚Üí* G) (inj : Function.Injective œÜ),
      have := Fintype.ofInjective œÜ inj
      IsZero ((tateCohomology 0).obj (M ‚Üì œÜ : Rep R H)) ‚àß
        IsZero ((tateCohomology (-1)).obj (M ‚Üì œÜ : Rep R H))) :
    TrivialTateCohomology M where
  isZero H n := by
    match n with
    | .ofNat (n + 1) =>
      letI := TrivialCohomology.res M (H := H)
      exact isZero_of_trivialCohomology.of_iso <|
        (tateCohomology.isoGroupCohomology n).app (M ‚Üì H.subtype)
    | .negSucc (n + 1) =>
      letI := TrivialHomology.res M (H := H) H.subtype_injective
      rw [show Int.negSucc (n + 1) = -n - 2 by grind]
      exact isZero_of_trivialHomology.of_iso <|
        (tateCohomology.isoGroupHomology n).app (M ‚Üì H.subtype)
    | 0 =>
      aesop
    | .negSucc 0 =>
      aesop

instance [Subsingleton G] {M : Rep R G} : M.TrivialCohomology where
  isZero H n := by
    letI : Subsingleton H := Function.Injective.subsingleton H.subtype_injective
    apply isZero_groupCohomology_succ_of_subsingleton

instance [Subsingleton G] {M : Rep R G} : M.TrivialHomology where
  isZero H n := by
    letI : Subsingleton H := Function.Injective.subsingleton H.subtype_injective
    apply isZero_groupHomology_succ_of_subsingleton

instance [Subsingleton G] {M : Rep R G} : M.TrivialTateCohomology := by
  haveI := Fintype.ofFinite G
  refine .of_cases ?_
  intro H _ œÜ inj
  have : Subsingleton H := Function.Injective.subsingleton inj
  have : (M ‚Üì œÜ).œÅ.IsTrivial := {
    out g := by
      rw [Subsingleton.eq_one g, map_one]
      rfl }
  constructor
  ¬∑ refine IsZero.of_iso ?_ (tateCohomology.zeroIsoOfIsTrivial _)
    rw [Nat.card_unique, Nat.cast_one, LinearMap.range_eq_top_of_cancel (by exact fun _ _ a ‚Ü¶ a)]
    exact ModuleCat.isZero_of_subsingleton _
  refine IsZero.of_iso ?_ (tateCohomology.negOneIsoOfIsTrivial _)
  rw [Nat.card_unique, Nat.cast_one, LinearMap.ker_eq_bot_of_cancel (by exact fun _ _ a ‚Ü¶ a)]
  exact ModuleCat.isZero_of_subsingleton _

end Rep
