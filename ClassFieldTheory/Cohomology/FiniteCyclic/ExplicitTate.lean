import ClassFieldTheory.Cohomology.FiniteCyclic.UpDown
import ClassFieldTheory.Mathlib.GroupTheory.SpecificGroups.Cyclic
import Mathlib.RepresentationTheory.Coinvariants
import Mathlib.RepresentationTheory.Invariants

/-!
# Explicit description of the `0`-th and `-1`-st Tate cohomology groups for finite cyclic groups

In this file, we provide an explicit description of the `0`-th and `-1`-st Tate cohomology groups
of a representation of a finite cyclic group in terms of its norm map.
-/

noncomputable section

open IsCyclic LinearMap groupCohomology

namespace Representation
universe u
variable {R G A : Type} [CommRing R] [Group G] [IsCyclic G] [AddCommGroup A] [Module R A]
  (ρ : Representation R G A)

/-- For a representation `A` of a finite cyclic group `G` generated by `g : G`,
this is the map `x ↦ x - g • x`. -/
abbrev oneSubGen : A →ₗ[R] A := 1 - ρ (gen G)

/-- An explicit description of the 0-cycles of the Tate complex. -/
abbrev tateZ0 := ker ρ.oneSubGen

/-- An explicit description of the -1-boundaries of the Tate complex. -/
abbrev tateBNeg1 := range ρ.oneSubGen

lemma tateZ0_eq_invariants : ρ.tateZ0 = ρ.invariants := by
  ext x
  simp only [mem_invariants, mem_ker, LinearMap.sub_apply, Module.End.one_apply, sub_eq_zero]
  refine ⟨fun h g => ?_, fun h => (h (gen G)).symm⟩
  have hg : (ρ.asGroupHom (gen G)) ∈ MulAction.stabilizer (A →ₗ[R] A)ˣ x := h.symm
  rw [← Subgroup.zpowers_le, ← MonoidHom.map_zpowers, Subgroup.map_le_iff_le_comap] at hg
  exact hg (gen_generate g)

variable [Fintype G]

lemma tateBNeg1_eq_coinvariantsKer : ρ.tateBNeg1 = Coinvariants.ker ρ := by
  apply le_antisymm
  · intro x h
    apply Submodule.subset_span
    obtain ⟨y, hy⟩ := h
    simp only [Set.mem_range, Prod.exists]
    use gen G, -y
    simpa [← sub_eq_neg_add]
  · unfold Coinvariants.ker
    rw [Submodule.span_le, LinearMap.coe_range, Set.range_subset_iff, Prod.forall]
    intro g x
    obtain ⟨n, -, rfl⟩ := (unique_gen_pow g).exists
    use -∑ i ∈ Finset.range n, (ρ (gen G))^[i] x
    simp only [LinearMap.sub_apply, Module.End.one_apply, map_neg, map_sum, map_pow,
      ← Function.iterate_succ_apply']
    rw [Finset.sum_range_sub' fun i => (ρ (gen G))^[i] x]
    simp [Module.End.pow_apply]

/-- An explicit description of the -1-cycles of the Tate complex. -/
abbrev tateZNeg1 := ker ρ.norm

/-- An explicit description of the 0-boundaries of the Tate complex. -/
abbrev tateB0 := range ρ.norm

@[simp] lemma tateB0_le_tateZ0 : ρ.tateB0 ≤ ρ.tateZ0 := by rintro _ ⟨y, rfl⟩; simp
@[simp] lemma tateBNeg1_le_tateZNeg1 : ρ.tateBNeg1 ≤ ρ.tateZNeg1 := by rintro _ ⟨y, rfl⟩; simp

/-- An explicit description of the 0-th Tate cohomology group. -/
abbrev TateH0 : Type := ρ.tateZ0 ⧸ (ρ.tateB0.submoduleOf ρ.tateZ0)

/-- An explicit description of the -1-th Tate cohomology group. -/
abbrev TateHNeg1 : Type := ρ.tateZNeg1 ⧸ (ρ.tateBNeg1.submoduleOf ρ.tateZNeg1)

/-- The explicit description of the 0-th Tate cohomology group is isomorphic to it. -/
def tateH0LinearEquiv : ρ.TateH0 ≃ₗ[R] (tateCohomology 0).obj (.of ρ)  :=
  (Submodule.Quotient.equiv _ _ (.ofEq _ _ ρ.tateZ0_eq_invariants) <| by
    erw [Submodule.map_equiv_eq_comap_symm]; rfl).trans
      (TateCohomology.zeroIso (.of ρ)).symm.toLinearEquiv

/-- The explicit description of the -1-st Tate cohomology group is isomorphic to it. -/
def tateHNeg1LinearEquiv : ρ.TateHNeg1 ≃ₗ[R] (tateCohomology (-1)).obj (.of ρ) :=
  (Submodule.quotEquivOfEq _ _ <| congrArg _ ρ.tateBNeg1_eq_coinvariantsKer).trans
    (TateCohomology.negOneIso <| .of ρ).symm.toLinearEquiv

/-- The explicit description of the 0-th Tate cohomology group is isomorphic to the second
cohomology group. -/
def tateH0LinearEquivH2 : ρ.TateH0 ≃ₗ[R] H2 (.of ρ) :=
  ρ.tateH0LinearEquiv ≪≫ₗ
    ((periodicTateCohomology 0 2 (by simp [Int.modEq_iff_dvd]) ≪≫
      TateCohomology.isoGroupCohomology 1).app (.of ρ)).toLinearEquiv

/-- The explicit description of the -1-th Tate cohomology group is isomorphic to the first
cohomology group. -/
def tateHNeg1LinearEquivH1 : ρ.TateHNeg1 ≃ₗ[R] H1 (.of ρ) :=
  ρ.tateHNeg1LinearEquiv ≪≫ₗ
    ((periodicTateCohomology (-1) 1 (by simp [Int.modEq_iff_dvd]) ≪≫
      TateCohomology.isoGroupCohomology 0).app (.of ρ)).toLinearEquiv

end Representation
